"use strict";
//API key 

const apiKey = 'ZHYtHC7gZYvdwhuXzgV3gzc1V03qRzcVZRetS1oO';


//Allow user search for parks in one or more states.


function formatQueryParams(params) {
    const queryItems = Object.keys(params)
        .map(key => `${key}=${params[key]}`)
    return queryItems.join('&');
}

//function for result display

function displayResults(responseJson, maxResults) {
    // if there are previous results, remove them
    $('#results-list').empty();
    // iterate through the items array
    for (let i = 0; i < responseJson.data.length & i < maxResults; i++) {
        // for each state park object in the items as data
        //array, add a list data item to the results 
        //list with the Full name, Description, and Website URL

        //To get the title for the state natinal park we need to access the string object within the items array. From there, we need to go to the string object in order to find the title value. We take a similar path for the description & url as well

        $('#results-list').append(
            `<li><h3><a href="${responseJson.data[i].url}">${responseJson.data[i].fullName}</a></h3>
        <p>${responseJson.data[i].description}</p>
        </li>`)
    };
    //display the results section  
    $('#results').removeClass('hidden');
};

//Allow user must be able to set the max number of results, with a default of 10.

function getNationalParks(searchURL, searchTerm, apiKey, maxResults = 10) {
    const params = {
        stateCode: searchTerm,
        api_key: apiKey,
        limit: maxResults,
    };

    //formatQueryParams gets passed an arbitrary object of query parameters, and iterates over the keys in the object. It uses .map, to generate an array whose items are strings representing each key-value pair. 

    //After mapping each of the key-value pairs, formatQueryParams finally returns a single string generated by joining each array item with the "&" character.

    const queryString = formatQueryParams(params)
    const url = searchURL + '?' + queryString + '&api_key=' + apiKey;
    console.log(url);


    //Call fetch, followed by a .then block where we confirm the response was ok. If not we throw an error, otherwise, we call response.json, and finally, we log the response data to the console.

    fetch(url)
        .then(response => {
            if (response.ok) {
                return response.json();
            }
            throw new Error(response.statusText);
        })
        .then(responseJson => displayResults(responseJson, maxResults))
        .catch(err => {
            $('#error-message').text(`Something went wrong: ${err.message}`);
        });
}

//api.nps.gov/api/v1/parks?stateCode=${searchTerm}&maxResults=${maxResults}&api_key=ZHYtHC7gZYvdwhuXzgV3gzc1V03qRzcVZRetS1oO

function watchForm() {
    $('#js-form').on('submit', function(event) {
        event.preventDefault();
        const searchURL = 'https://api.nps.gov/api/v1/parks/'
        const searchTerm = $('.js-state-entered').val().replace(/ /g, '');
        const maxResults = $('#js-max-results').val();
        getNationalParks(searchURL, searchTerm, apiKey, maxResults);
    });
}

$(watchForm);

//Search trigger a call to NPS's API.


//Allow The parks in the given state to be displayed on the page. 


//Include at least:

//Full name
//Description
//Website URL

//Allow The user to be able to make multiple searches and see only the results for the current search.